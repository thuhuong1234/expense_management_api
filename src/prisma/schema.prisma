generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  isAdmin       Boolean  @default(false) @map("is_admin")
  email         String   @unique @db.VarChar(45)
  name          String?  @db.VarChar(45)
  password      String   @db.VarChar(255)
  avatar        String?  @db.VarChar(255)
  phone         String   @unique @default("") @db.Char(45)
  rememberToken Boolean? @default(false) @map("remember_token")
  createdAt     DateTime @default(now()) @map("create_at")
  updatedAt     DateTime @default(now()) @map("update_at")
  gender        Genders? @default(Undefined)
  todos         Todo[]
  tokens        Token[]

  @@map("users")
}

model Category {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(45)
  createdAt    DateTime     @default(now()) @map("create_at")
  updatedAt    DateTime     @default(now()) @map("update_at")
  categoryType CategoryType @default(Expense) @map("category_type")

  todos Todo[]

  @@map("categories")
}

model Todo {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(45)
  amountOfMoney Decimal  @map("amount_of_money") @db.Decimal(15, 2)
  createdAt     DateTime @default(now()) @map("create_at")
  updatedAt     DateTime @default(now()) @map("update_at")

  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?      @map("user_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  @@map("todos")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  token     String?   @db.Text
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum CategoryType {
  Expense
  Income
}

enum Genders {
  Male
  Female
  Undefined
}
